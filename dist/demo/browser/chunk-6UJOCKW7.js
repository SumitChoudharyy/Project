import{b as u,e as f}from"./chunk-7FIX2E74.js";import{$ as m,Y as g,fc as C,gc as h,n as l,o as r,r as s,z as p}from"./chunk-ONERCYX6.js";var $=(()=>{let n=class n{constructor(t,a){this.http=t,this.mockData=a,this.apiBaseUrl="http://localhost:8080/complaints"}createComplaint(t,a){let e={customerId:t,description:a};return this.http.post(`${this.apiBaseUrl}/register`,e).pipe(s(o=>(console.log("Complaint created successfully:",o),o)),p(o=>{console.log("API call failed, using mock data creation:",o);let i={complaintId:`COMP${Date.now()}`,customerId:t,description:a,title:`Complaint #${Date.now()}`,category:"OTHER",priority:"MEDIUM",status:u.ACTIVE,createdAt:new Date().toISOString().split("T")[0],updatedAt:new Date().toISOString().split("T")[0],actions:[]};return this.mockData.addComplaint(i),l(i)}))}getComplaintsByCustomer(t){return this.http.get(`${this.apiBaseUrl}/customer/${t}`).pipe(s(a=>(console.log("Customer complaints loaded:",a),a)),p(a=>{console.log("API call failed, using mock data:",a);let o=this.mockData.getComplaints().filter(i=>i.customerId===t);return l(o)}))}getAllComplaints(){return this.http.get(`${this.apiBaseUrl}/all`).pipe(s(t=>(console.log("All complaints loaded:",t),t)),p(t=>(console.log("API call failed, using mock data:",t),l(this.mockData.getComplaints()))))}updateComplaintStatus(t,a){let e=new C().set("status",a);return this.http.put(`${this.apiBaseUrl}/${t}/status`,null,{params:e}).pipe(s(o=>(console.log("Complaint status updated successfully:",o),o)),p(o=>{console.log("API call failed, using mock data update:",o);let i=this.mockData.updateComplaint(t,{status:a});return i?l(i):r(()=>"Failed to update complaint status")}))}deleteComplaint(t){return this.http.delete(`${this.apiBaseUrl}/${t}`).pipe(s(()=>{console.log("Complaint deleted successfully")}),p(a=>(console.error("Error deleting complaint:",a),r(()=>a))))}createComplaintLegacy(t,a){return this.createComplaint(t,a.description)}getComplaintsByCustomerLegacy(t){return this.getComplaintsByCustomer(t)}getAllComplaintsLegacy(){return this.getAllComplaints()}updateComplaintLegacy(t,a){return a.status?this.updateComplaintStatus(t,a.status):r(()=>"Only status updates are supported")}assignComplaint(t,a){let e=this.mockData.updateComplaint(t,{assignedStaffId:a});return e?l(e):r(()=>"Failed to assign complaint")}resolveComplaint(t,a){return this.updateComplaintStatus(t,u.RESOLVED)}addAction(t,a,e,o){let i=this.mockData.getComplaintById(t);if(i){let y={id:Date.now().toString(),staffId:a,type:e,message:o,createdAt:new Date},d=this.mockData.updateComplaint(t,{actions:[...i.actions||[],y]});if(d)return l(d)}return r(()=>"Failed to add action")}updateStatus(t,a){return this.updateComplaintStatus(t,a)}getComplaintsAssignedToStaff(t){return this.getAllComplaints().pipe(s(a=>a.filter(e=>e.assignedStaffId===t)))}getComplaintsByCategoryForUnassigned(t){return this.getAllComplaints().pipe(s(a=>a.filter(e=>!e.assignedStaffId&&e.category===t)))}};n.\u0275fac=function(a){return new(a||n)(m(h),m(f))},n.\u0275prov=g({token:n,factory:n.\u0275fac,providedIn:"root"});let c=n;return c})();export{$ as a};
