import{a as f}from"./chunk-RDV23JZH.js";import{a as k,b as S}from"./chunk-FJOTTGA4.js";import{$ as D,Y as d,a as s,b as c,fc as m,gc as I,n as u,o as p,r as l,z as h}from"./chunk-ONERCYX6.js";var B={production:!1,apiBaseUrl:"http://localhost:8080/api"};var w=(()=>{let n=class n{constructor(){this.BOOKINGS_KEY="hotel_bookings",this.USERS_KEY="hotel_users"}saveBooking(r){let e=this.getBookingsFromStorage(),t=e.findIndex(a=>a.id===r.id);t>=0?e[t]=r:e.push(r),this.saveBookingsToStorage(e)}getBookings(){let r=this.getBookingsFromStorage();return u(r.map(e=>c(s({},e),{checkInDate:new Date(e.checkInDate),checkOutDate:new Date(e.checkOutDate),createdAt:new Date(e.createdAt),updatedAt:new Date(e.updatedAt),paymentDate:e.paymentDate?new Date(e.paymentDate):void 0})))}getBookingsByCustomer(r){let t=this.getBookingsFromStorage().filter(a=>a.customerId===r);return u(t.map(a=>c(s({},a),{checkInDate:new Date(a.checkInDate),checkOutDate:new Date(a.checkOutDate),createdAt:new Date(a.createdAt),updatedAt:new Date(a.updatedAt),paymentDate:a.paymentDate?new Date(a.paymentDate):void 0})))}getBookingById(r){let t=this.getBookingsFromStorage().find(a=>a.id===r);return t?u(c(s({},t),{checkInDate:new Date(t.checkInDate),checkOutDate:new Date(t.checkOutDate),createdAt:new Date(t.createdAt),updatedAt:new Date(t.updatedAt),paymentDate:t.paymentDate?new Date(t.paymentDate):void 0})):u(null)}updateBooking(r,e){let t=this.getBookingsFromStorage(),a=t.findIndex(o=>o.id===r);if(a===-1)throw new Error("Booking not found");return t[a]=c(s(s({},t[a]),e),{updatedAt:new Date}),this.saveBookingsToStorage(t),u(t[a])}deleteBooking(r){let e=this.getBookingsFromStorage(),t=e.filter(a=>a.id!==r);return t.length<e.length?(this.saveBookingsToStorage(t),u(!0)):u(!1)}saveUser(r){let e=this.getUsersFromStorage(),t=e.findIndex(a=>a.id===r.id);t>=0?e[t]=r:e.push(r),this.saveUsersToStorage(e)}getUserById(r){return this.getUsersFromStorage().find(t=>t.id===r)||null}getBookingsFromStorage(){try{let r=localStorage.getItem(this.BOOKINGS_KEY);return r?JSON.parse(r):[]}catch(r){return console.error("Error reading bookings from localStorage:",r),[]}}saveBookingsToStorage(r){try{localStorage.setItem(this.BOOKINGS_KEY,JSON.stringify(r))}catch(e){console.error("Error saving bookings to localStorage:",e)}}getUsersFromStorage(){try{let r=localStorage.getItem(this.USERS_KEY);return r?JSON.parse(r):[]}catch(r){return console.error("Error reading users from localStorage:",r),[]}}saveUsersToStorage(r){try{localStorage.setItem(this.USERS_KEY,JSON.stringify(r))}catch(e){console.error("Error saving users to localStorage:",e)}}generateId(){return Date.now().toString(36)+Math.random().toString(36).substr(2)}};n.\u0275fac=function(e){return new(e||n)},n.\u0275prov=d({token:n,factory:n.\u0275fac,providedIn:"root"});let g=n;return g})();var x=(()=>{let n=class n{constructor(r,e,t){this.http=r,this.roomService=e,this.localStorageService=t,this.apiBaseUrl=B.apiBaseUrl}searchRooms(r){return this.roomService.searchRoomsWithCriteria(r)}createBooking(r,e){let t=`${this.apiBaseUrl}/bookings`,a={customerId:r,roomId:e.roomId,checkInDate:e.checkInDate.toISOString().split("T")[0],checkOutDate:e.checkOutDate.toISOString().split("T")[0],guests:e.guests,specialRequests:e.specialRequests||""};return this.http.post(t,a).pipe(h(o=>{console.log("API failed, using local storage for booking");let i={id:this.localStorageService.generateId(),customerId:r,roomId:e.roomId,checkInDate:e.checkInDate,checkOutDate:e.checkOutDate,guests:e.guests,totalAmount:0,status:k.PENDING,paymentStatus:S.PENDING,specialRequests:e.specialRequests,createdAt:new Date,updatedAt:new Date};return this.localStorageService.saveBooking(i),u(i)}))}getBookingsByCustomer(r){let e=`${this.apiBaseUrl}/bookings/customer/${r}`;return this.http.get(e).pipe(l(t=>t.map(a=>c(s({},a),{checkInDate:new Date(a.checkInDate),checkOutDate:new Date(a.checkOutDate),createdAt:new Date(a.createdAt),updatedAt:new Date(a.updatedAt)}))),h(t=>(console.log("API failed, using local storage for customer bookings"),this.localStorageService.getBookingsByCustomer(r))))}getAllBookings(){let r=`${this.apiBaseUrl}/bookings`;return this.http.get(r).pipe(l(e=>e.map(t=>c(s({},t),{checkInDate:new Date(t.checkInDate),checkOutDate:new Date(t.checkOutDate),createdAt:new Date(t.createdAt),updatedAt:new Date(t.updatedAt)}))),h(e=>(console.log("API failed, using local storage for all bookings"),this.localStorageService.getBookings())))}getBookingById(r){let e=`${this.apiBaseUrl}/bookings/${r}`;return this.http.get(e).pipe(l(t=>c(s({},t),{checkInDate:new Date(t.checkInDate),checkOutDate:new Date(t.checkOutDate),createdAt:new Date(t.createdAt),updatedAt:new Date(t.updatedAt)})),h(t=>(console.log("API failed, using local storage for booking"),this.localStorageService.getBookingById(r).pipe(l(a=>{if(!a)throw new Error("Booking not found");return a})))))}updateBooking(r,e){let t=`${this.apiBaseUrl}/bookings/${r}`,a=s({},e);return e.checkInDate&&(a.checkInDate=e.checkInDate.toISOString().split("T")[0]),e.checkOutDate&&(a.checkOutDate=e.checkOutDate.toISOString().split("T")[0]),this.http.put(t,a).pipe(l(o=>c(s({},o),{checkInDate:new Date(o.checkInDate),checkOutDate:new Date(o.checkOutDate),createdAt:new Date(o.createdAt),updatedAt:new Date(o.updatedAt)})),h(o=>(console.log("API failed, using local storage for updating booking"),this.localStorageService.updateBooking(r,e))))}cancelBooking(r,e){let t=`${this.apiBaseUrl}/bookings/${r}/cancel`;return this.http.put(t,{cancellationReason:e}).pipe(l(a=>c(s({},a),{checkInDate:new Date(a.checkInDate),checkOutDate:new Date(a.checkOutDate),createdAt:new Date(a.createdAt),updatedAt:new Date(a.updatedAt)})),h(a=>(console.error("Error cancelling booking:",a),p(()=>a.error?.message||"Failed to cancel booking"))))}generateInvoice(r){let e=`${this.apiBaseUrl}/bookings/${r}/invoice`;return this.http.get(e).pipe(l(t=>c(s({},t),{issueDate:new Date(t.issueDate),dueDate:new Date(t.dueDate)})),h(t=>(console.error("Error generating invoice:",t),p(()=>t.error?.message||"Failed to generate invoice"))))}getBookingsByStatus(r){let e=`${this.apiBaseUrl}/bookings/status/${r}`;return this.http.get(e).pipe(l(t=>t.map(a=>c(s({},a),{checkInDate:new Date(a.checkInDate),checkOutDate:new Date(a.checkOutDate),createdAt:new Date(a.createdAt),updatedAt:new Date(a.updatedAt)}))),h(t=>(console.error("Error fetching bookings by status:",t),p(()=>t.error?.message||"Failed to fetch bookings"))))}getBookingsByDateRange(r,e){let t=`${this.apiBaseUrl}/bookings/date-range`,a=new m().set("startDate",r.toISOString().split("T")[0]).set("endDate",e.toISOString().split("T")[0]);return this.http.get(t,{params:a}).pipe(l(o=>o.map(i=>c(s({},i),{checkInDate:new Date(i.checkInDate),checkOutDate:new Date(i.checkOutDate),createdAt:new Date(i.createdAt),updatedAt:new Date(i.updatedAt)}))),h(o=>(console.error("Error fetching bookings by date range:",o),p(()=>o.error?.message||"Failed to fetch bookings"))))}checkRoomAvailability(r,e,t){let a=`${this.apiBaseUrl}/bookings/check-availability`,o=new m().set("roomId",r).set("checkInDate",e.toISOString().split("T")[0]).set("checkOutDate",t.toISOString().split("T")[0]);return this.http.get(a,{params:o}).pipe(l(i=>i.available),h(i=>(console.log("API failed, using local storage for room availability"),u(!0))))}processPayment(r,e,t){let a={status:k.CONFIRMED,paymentStatus:S.PAID,totalAmount:e,paymentTransactionId:t,paymentDate:new Date};return this.updateBooking(r,a)}};n.\u0275fac=function(e){return new(e||n)(D(I),D(f),D(w))},n.\u0275prov=d({token:n,factory:n.\u0275fac,providedIn:"root"});let g=n;return g})();export{w as a,x as b};
