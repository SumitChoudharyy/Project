import{a as k}from"./chunk-LMRVVMVD.js";import{$ as D,Y as g,a as i,b as p,ec as d,fc as m,o as s,r as h,z as n}from"./chunk-WOJ2UDLT.js";var I={production:!1,apiBaseUrl:"http://localhost:8080/api"};var v=(()=>{let u=class u{constructor(r,t){this.http=r,this.roomService=t,this.apiBaseUrl=I.apiBaseUrl}searchRooms(r){return this.roomService.searchRoomsWithCriteria(r)}createBooking(r,t){let e=`${this.apiBaseUrl}/bookings`,a={customerId:r,roomId:t.roomId,checkInDate:t.checkInDate.toISOString().split("T")[0],checkOutDate:t.checkOutDate.toISOString().split("T")[0],guests:t.guests,specialRequests:t.specialRequests||""};return this.http.post(e,a).pipe(n(c=>(console.error("Error creating booking:",c),s(()=>c.error?.message||"Failed to create booking"))))}getBookingsByCustomer(r){let t=`${this.apiBaseUrl}/bookings/customer/${r}`;return this.http.get(t).pipe(h(e=>e.map(a=>p(i({},a),{checkInDate:new Date(a.checkInDate),checkOutDate:new Date(a.checkOutDate),createdAt:new Date(a.createdAt),updatedAt:new Date(a.updatedAt)}))),n(e=>(console.error("Error fetching customer bookings:",e),s(()=>e.error?.message||"Failed to fetch bookings"))))}getAllBookings(){let r=`${this.apiBaseUrl}/bookings`;return this.http.get(r).pipe(h(t=>t.map(e=>p(i({},e),{checkInDate:new Date(e.checkInDate),checkOutDate:new Date(e.checkOutDate),createdAt:new Date(e.createdAt),updatedAt:new Date(e.updatedAt)}))),n(t=>(console.error("Error fetching all bookings:",t),s(()=>t.error?.message||"Failed to fetch bookings"))))}getBookingById(r){let t=`${this.apiBaseUrl}/bookings/${r}`;return this.http.get(t).pipe(h(e=>p(i({},e),{checkInDate:new Date(e.checkInDate),checkOutDate:new Date(e.checkOutDate),createdAt:new Date(e.createdAt),updatedAt:new Date(e.updatedAt)})),n(e=>(console.error("Error fetching booking:",e),s(()=>e.error?.message||"Failed to fetch booking"))))}updateBooking(r,t){let e=`${this.apiBaseUrl}/bookings/${r}`,a=i({},t);return t.checkInDate&&(a.checkInDate=t.checkInDate.toISOString().split("T")[0]),t.checkOutDate&&(a.checkOutDate=t.checkOutDate.toISOString().split("T")[0]),this.http.put(e,a).pipe(h(c=>p(i({},c),{checkInDate:new Date(c.checkInDate),checkOutDate:new Date(c.checkOutDate),createdAt:new Date(c.createdAt),updatedAt:new Date(c.updatedAt)})),n(c=>(console.error("Error updating booking:",c),s(()=>c.error?.message||"Failed to update booking"))))}cancelBooking(r,t){let e=`${this.apiBaseUrl}/bookings/${r}/cancel`;return this.http.put(e,{cancellationReason:t}).pipe(h(a=>p(i({},a),{checkInDate:new Date(a.checkInDate),checkOutDate:new Date(a.checkOutDate),createdAt:new Date(a.createdAt),updatedAt:new Date(a.updatedAt)})),n(a=>(console.error("Error cancelling booking:",a),s(()=>a.error?.message||"Failed to cancel booking"))))}generateInvoice(r){let t=`${this.apiBaseUrl}/bookings/${r}/invoice`;return this.http.get(t).pipe(h(e=>p(i({},e),{issueDate:new Date(e.issueDate),dueDate:new Date(e.dueDate)})),n(e=>(console.error("Error generating invoice:",e),s(()=>e.error?.message||"Failed to generate invoice"))))}getBookingsByStatus(r){let t=`${this.apiBaseUrl}/bookings/status/${r}`;return this.http.get(t).pipe(h(e=>e.map(a=>p(i({},a),{checkInDate:new Date(a.checkInDate),checkOutDate:new Date(a.checkOutDate),createdAt:new Date(a.createdAt),updatedAt:new Date(a.updatedAt)}))),n(e=>(console.error("Error fetching bookings by status:",e),s(()=>e.error?.message||"Failed to fetch bookings"))))}getBookingsByDateRange(r,t){let e=`${this.apiBaseUrl}/bookings/date-range`,a=new d().set("startDate",r.toISOString().split("T")[0]).set("endDate",t.toISOString().split("T")[0]);return this.http.get(e,{params:a}).pipe(h(c=>c.map(o=>p(i({},o),{checkInDate:new Date(o.checkInDate),checkOutDate:new Date(o.checkOutDate),createdAt:new Date(o.createdAt),updatedAt:new Date(o.updatedAt)}))),n(c=>(console.error("Error fetching bookings by date range:",c),s(()=>c.error?.message||"Failed to fetch bookings"))))}checkRoomAvailability(r,t,e){let a=`${this.apiBaseUrl}/bookings/check-availability`,c=new d().set("roomId",r).set("checkInDate",t.toISOString().split("T")[0]).set("checkOutDate",e.toISOString().split("T")[0]);return this.http.get(a,{params:c}).pipe(h(o=>o.available),n(o=>(console.error("Error checking room availability:",o),s(()=>o.error?.message||"Failed to check availability"))))}};u.\u0275fac=function(t){return new(t||u)(D(m),D(k))},u.\u0275prov=g({token:u,factory:u.\u0275fac,providedIn:"root"});let l=u;return l})();export{v as a};
