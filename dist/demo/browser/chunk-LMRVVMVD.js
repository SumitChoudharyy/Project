import{a}from"./chunk-TWAJJYLZ.js";import{$ as m,Y as p,ec as d,fc as h,n as u,o as r,r as i,z as n}from"./chunk-WOJ2UDLT.js";var E=(()=>{let c=class c{constructor(e){this.http=e,this.apiBaseUrl="http://localhost:8080/api/rooms"}getAllRooms(){return console.log("Fetching all rooms from API"),this.http.get(`${this.apiBaseUrl}/all`).pipe(i(e=>(console.log("All rooms fetched successfully:",e.length,"rooms"),e.map(t=>this.mapApiResponseToRoom(t)))),n(e=>(console.error("Error fetching all rooms:",e),e.status===0?r(()=>"Unable to connect to server. Please check your connection."):r(()=>"Failed to fetch rooms. Please try again."))))}getAvailableRooms(){return this.http.get(`${this.apiBaseUrl}/available`).pipe(i(e=>e.map(t=>this.mapApiResponseToRoom(t))),n(e=>(console.error("Error fetching available rooms:",e),r(()=>"Failed to fetch available rooms"))))}getRoomsByCategory(e){return this.http.get(`${this.apiBaseUrl}/filter/${e}`).pipe(i(t=>t.map(o=>this.mapApiResponseToRoom(o))),n(t=>(console.error("Error filtering rooms by category:",t),r(()=>"Failed to filter rooms"))))}searchRooms(e){console.log("Searching rooms with params:",e);let t=new d().set("checkIn",e.checkIn).set("checkOut",e.checkOut);return e.category&&(t=t.set("category",e.category)),e.minPrice&&(t=t.set("minPrice",e.minPrice.toString())),e.maxPrice&&(t=t.set("maxPrice",e.maxPrice.toString())),e.capacity&&(t=t.set("capacity",e.capacity.toString())),this.http.get(`${this.apiBaseUrl}/search`,{params:t}).pipe(i(o=>(console.log("Room search completed successfully:",o.length,"rooms found"),o.map(s=>this.mapApiResponseToRoom(s)))),n(o=>(console.error("Error searching rooms:",o),o.status===0?r(()=>"Unable to connect to server. Please check your connection."):o.status===400?r(()=>"Invalid search parameters provided."):r(()=>"Failed to search rooms. Please try again."))))}addRoom(e){return console.log("Adding room with data:",e),this.http.post(`${this.apiBaseUrl}/add`,e).pipe(i(t=>(console.log("Room added successfully:",t),this.mapApiResponseToRoom(t))),n(t=>(console.error("Error adding room:",t),t.status===401?r(()=>"Unauthorized: Admin access required"):t.status===400?r(()=>"Invalid room data provided"):r(()=>"Failed to add room. Please try again."))))}updateRoom(e,t){let o=parseInt(e);return console.log("Updating room with ID:",e,"(converted to integer:",o,")","and data:",t),this.http.put(`${this.apiBaseUrl}/update/${o}`,t).pipe(i(s=>(console.log("Room updated successfully:",s),this.mapApiResponseToRoom(s))),n(s=>(console.error("Error updating room:",s),s.status===401?r(()=>"Unauthorized: Admin access required"):s.status===404?r(()=>"Room not found"):s.status===400?r(()=>"Invalid room data provided"):r(()=>"Failed to update room. Please try again."))))}deleteRoom(e){let t=parseInt(e);return console.log("Deleting room with ID:",e,"(converted to integer:",t,")"),this.http.delete(`${this.apiBaseUrl}/delete/${t}`).pipe(i(()=>{console.log("Room deleted successfully")}),n(o=>(console.error("Error deleting room:",o),console.error("Error details:",{status:o.status,statusText:o.statusText,message:o.message,error:o.error}),o.status===401?r(()=>"Unauthorized: Admin access required"):o.status===404?r(()=>"Room not found"):o.status===500?r(()=>"Server error: Please try again later or contact support"):r(()=>`Failed to delete room (Status: ${o.status}). Please try again.`))))}getRoomById(e){return this.getAllRooms().pipe(i(t=>t.find(o=>o.id===e)||null),n(t=>(console.error("Error fetching room by ID:",t),r(()=>"Failed to fetch room"))))}searchRoomsWithCriteria(e){let t={checkIn:e.checkInDate.toISOString().split("T")[0],checkOut:e.checkOutDate.toISOString().split("T")[0],capacity:e.guests};return e.roomType&&(t.category=this.mapRoomTypeToCategory(e.roomType)),e.minPrice&&(t.minPrice=e.minPrice),e.maxPrice&&(t.maxPrice=e.maxPrice),this.searchRooms(t)}getRoomsByType(e){let t=this.mapRoomTypeToCategory(e);return this.getRoomsByCategory(t)}mapApiResponseToRoom(e){return{id:e.id.toString(),roomNumber:e.roomNumber,type:this.mapCategoryToRoomType(e.category),category:e.category,description:`${e.category} room with ${e.capacity} person capacity`,amenities:e.amenities,pricePerNight:e.pricePerNight,maxOccupancy:e.capacity,capacity:e.capacity,images:[],isActive:!0,available:e.available,floor:parseInt(e.roomNumber.charAt(0))||1}}mapRoomTypeToCategory(e){return{[a.SINGLE]:"Standard",[a.DOUBLE]:"Standard",[a.SUITE]:"Suite",[a.DELUXE]:"Deluxe",[a.PRESIDENTIAL]:"Presidential"}[e]||"Standard"}mapCategoryToRoomType(e){let t=e.toLowerCase();return t.includes("suite")?a.SUITE:t.includes("deluxe")?a.DELUXE:t.includes("presidential")?a.PRESIDENTIAL:t.includes("standard")?a.SINGLE:a.SINGLE}getRoomStats(){return this.getAllRooms().pipe(i(e=>{let t=e.length,o=e.filter(g=>g.available).length,s=t-o;return{total:t,available:o,occupied:s}}),n(e=>(console.error("Error fetching room stats:",e),u({total:0,available:0,occupied:0}))))}};c.\u0275fac=function(t){return new(t||c)(m(h))},c.\u0275prov=p({token:c,factory:c.\u0275fac,providedIn:"root"});let l=c;return l})();export{E as a};
